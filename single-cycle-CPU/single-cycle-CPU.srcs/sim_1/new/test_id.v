`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2019/12/11 11:12:58
// Design Name: 
// Module Name: test_id
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module test_id;
    
    reg         rst_n;
    reg [31:0]  inst;
    
    wire [4:0]  rw_addr;
    wire [4:0]  ra_addr;
    wire [4:0]  rb_addr;    

    // 单值控制信号
    wire [1:0] branch;       // pc
    wire  jump;         // pc
    wire [2:0] memto_reg;   // ALU to Reg
    wire  reg_wr;       // Reg
    wire  mem_wr;       // Mem
    wire  alu_asrc;     // Reg to ALU
    wire muxpc_busa;
    
    // 多值控制信号
    wire [1:0] alu_bsrc;   // imm and Reg to ALU
    wire [2:0] ext_op;     // imm
    wire [5:0] alu_ctr;    // ALU
    wire [1:0] mux_store;

    initial begin

        rst_n = 0;
        
        #50 // add
        rst_n = 1'b1;   // 0000000 rs2[4:0] rs1[4:0] 000 rd[4:0] 0110011
        inst =  32'b0000_0001_1111_1111_1000_1111_1011_0011;
        
        #50 // sub
        rst_n = 1'b1;
        inst = 32'b0100_0001_1111_1111_1000_1111_1011_0011;
        
        #50 // sll
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1001_1111_1011_0011;

        #50 // slt
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1010_1111_1011_0011;
        
        #50 // sltu
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1011_1111_1011_0011;
        
        #50 // xor
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1100_1111_1011_0011;
        
        #50 // srl
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1101_1111_1011_0011;
        
        #50 // sra
        rst_n = 1'b1;
        inst = 32'b0100_0001_1111_1111_1101_1111_1011_0011;
        
        #50 // or
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1110_1111_1011_0011;

        #50 // and
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1111_1111_1011_0011;      
        // 0000000 00001 00010 000 00011 0110011
        // 0000_0000_0001_0001_0000_0001_1011_0011 => 001101b3
        // R[00011] <- R[00001] + R[00010]
        
        // 0000000 00001 00011 000 00100 0110011
        // 0000_0000_0001_0001_1000_0010_0011_0011 => 00118233
        // R[00100] <- R[00001] + R[00011]
        
        //#50 // slt
        //rst_n = 1'b1;   // 0000000 rs2[4:0] rs1[4:0] 010 rd[4:0] 0110011
        //inst = 32'b0000_0001_1111_1111_1010_1111_1011_0011;
        
        // if (R[00001] < R[00011]) R[00100] <- 1
        // 0000000 00011 00001 010 00100 0110011
        // 0000_0000_0011_0000_1010_0010_0011_0011 => 0030a233
        
        //#50 // sltu
        //rst_n = 1'b1;   // 0000000 rs2[4:0] rs1[4:0] 011 rd[4:0] 0110011
        //inst = 32'b0000_0001_1111_1111_1011_1111_1011_0011;
        
        #50 // addi
        rst_n = 1'b1;   // imm[11:0] rs1[4:0] 110 rd[4:0] 0010011
        inst = 32'b1111_1111_1111_1111_1000_1111_1001_0011;
        #50 // slti
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1010_1111_1001_0011;
        #50 // sltiu
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1011_1111_1001_0011;
        #50 // xori
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1100_1111_1001_0011;
        #50 // ori
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1110_1111_1001_0011;
        #50 // addi
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1111_1111_1001_0011;
        #50 // slli
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1001_1111_1001_0011;
        #50 // ori
        rst_n = 1'b1;
        inst = 32'b0000_0001_1111_1111_1101_1111_1001_0011;
        #50 // ori
        rst_n = 1'b1;
        inst = 32'b0100_0001_1111_1111_1101_1111_1001_0011;

        
        #50 // lui
        rst_n = 1'b1;   // imm[19:0] rd[4:0] 0110111
        inst = 32'b1111_1111_1111_1111_1111_1111_1011_0111;
        #50 // auipc
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1111_1111_1001_0111;
        
        #50 // lb
        rst_n = 1'b1;   // imm[11:0] rs1[4:0] 010 rd[4:0] 0000011
        inst = 32'b1111_1111_1111_1111_1000_1111_1000_0011;
        #50 // lh
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1001_1111_1000_0011;
        #50 // lw
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1010_1111_1000_0011;
        #50 // lbu
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1100_1111_1000_0011;
        #50 // lhu
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1101_1111_1000_0011;

        
        // 000000000000 00001 010 00010 0000011
        // 0000_0000_0000_0000_1010_0001_0000_0011 => 0000a103
        // addr <- R[00001] + sext(000000000000); R[00010] <- M[addr];
        
        // 000000000100 00010 010 00011 0000011
        // 0000_0000_0100_0001_0010_0001_1000_0011 => 00412183
        // addr <- R[00010] + sext(000000000100); R[00011] <- M[addr];       
        #50 // sb
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1000_1111_1010_0011;
        #50 // sh
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1001_1111_1010_0011;
        #50 // sw
        rst_n = 1'b1;   // imm[11:5] rs2[4:0] rs1[4:0] 010 imm[4:0] 0100011
        inst = 32'b1111_1111_1111_1111_1010_1111_1010_0011;
        
        // 0000000 00011 00011 010 00100 0100011
        // 0000_0000_0011_0001_1010_0010_0010_0011 => 0031a223
        // addr <- R[00011] + sext(000000000100); M[addr] <- R[00011]

        #50 // beq
        rst_n = 1'b1;   // imm[12|10:5] rs2[4:0] rs1[4:0] 000 imm[4:1|11] 1100011
        inst = 32'b1111_1111_1111_1111_1000_1111_1110_0011; //之前是不是有错
        #50 // beq
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1001_1111_1110_0011;
        #50 // beq
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1100_1111_1110_0011;
        #50 // beq
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1101_1111_1110_0011;
        #50 // beq
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1110_1111_1110_0011;
        #50 // beq
        rst_n = 1'b1;
        inst = 32'b1111_1111_1111_1111_1111_1111_1110_0011;
        
        // if ( R[00001] - R[00010] == 0 ) PC <- PC + (sext(000000000100)*2)
        // 0000000 00010 00001 000 01000 1100011
        // 0000_0000_0010_0000_1000_0100_0110_0011 => 00208463
        
        #50 // jal
        rst_n = 1'b1;   // imm[19:0] rd[4:0] 1101111
        inst = 32'b1111_1111_1111_1111_1111_1111_1110_1111;
        #50 // jalr
        rst_n = 1'b1;   // imm[19:0] rd[4:0] 1101111
        inst = 32'b1111_1111_1111_1111_1000_1111_1110_0111;
        
        // R[00101] <- PC + 4; PC <- PC + (sext(0000000000 0000000100)*2)
        // 0000_0000_1000_0000_0000_0010_1110_1111 => 008002ef
        
        
    end
    
    id id0(
        
        .rst_n(rst_n),
        .inst_i(inst),
    
        .reg1_addr_o(ra_addr),
        .reg2_addr_o(rb_addr),
        .wd_o(rw_addr),  
        
        .branch_o(branch),       // pc
        .jump_o(jump),         // pc
        .memto_reg_o(memto_reg),   // ALU to Reg
        .reg_wr_o(reg_wr),       // Reg
        .mem_wr_o(mem_wr),       // Mem
        .alu_asrc_o(alu_asrc),     // Reg to ALU
        .muxpc_busa_o(muxpc_busa),
        
        // 多值控制信号
        .alu_bsrc_o(alu_bsrc),   // imm and Reg to ALU
        .ext_op_o(ext_op),     // imm
        .alu_ctr_o(alu_ctr),     // ALU
        .mux_store_o(mux_store)
    );
    
endmodule
